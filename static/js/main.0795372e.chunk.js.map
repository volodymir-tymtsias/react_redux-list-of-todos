{"version":3,"sources":["features/currentTodo.ts","features/filter.ts","features/todos.ts","app/store.ts","app/hooks.ts","components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","components/Loader/Loader.tsx","api.ts","components/TodoModal/TodoModal.tsx","App.tsx","index.tsx"],"names":["actions","todo","type","payload","currentTodoReducer","state","action","status","query","initialFilter","filterReducer","filter","todos","todosReducer","rootReducer","combineReducers","currentTodo","store","createStore","composeWithDevTools","applyMiddleware","thunk","useAppDispatch","useDispatch","useAppSelector","useSelector","TodoList","selectedTodos","visibleTodos","dispatch","completed","title","search","toLowerCase","includes","trim","length","className","map","id","onClick","currentTodoActions","TodoFilter","onSubmit","event","preventDefault","value","onChange","filterAactions","target","placeholder","style","pointerEvents","Loader","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","TodoModal","useState","user","setUser","useEffect","userId","loadedUser","href","email","name","App","loadedTodos","todosActions","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.0795372e.chunk.js","sourcesContent":["import { Todo } from '../types/Todo';\n\n// we use string literal as a type to avoid mistype in future\ntype RemoveTodoAction = { type: 'currentTodo/REMOVE' };\n\n// payload is a typical name for an action data\ntype SetTodoAction = {\n  type: 'currentTodo/SET';\n  payload: Todo;\n};\n\n// Action creator return type protect us from a mistype\nconst removeTodo = (): RemoveTodoAction => ({ type: 'currentTodo/REMOVE' });\n\nconst setTodo = (todo: Todo): SetTodoAction => ({\n  type: 'currentTodo/SET',\n  payload: todo,\n});\n\n// These actions will be used in the application\nexport const actions = { setTodo, removeTodo };\n\ntype State = Todo | null;\ntype Action = SetTodoAction | RemoveTodoAction;\n\nconst currentTodoReducer = (\n  state: State = null,\n  action: Action,\n): State => {\n  switch (action.type) {\n    case 'currentTodo/SET':\n      return action.payload;\n\n    case 'currentTodo/REMOVE':\n      return null;\n\n    default:\n      return state;\n  }\n};\n\nexport default currentTodoReducer;\n","import { Status } from '../types/Status';\n\ntype SetStatusFilterAction = {\n  type: 'filter/SET_STATUS_FILTER',\n  payload: Status;\n};\ntype SetQueryFilterAction = {\n  type: 'filter/SET_QUERY_FILTER',\n  payload: string;\n};\ntype ClearQueryFilterAction = {\n  type: 'filter/CLEAR_QUERY_FILTER',\n};\n// type RemoveStatusFilterAction = {\n//   type: 'filter/REMOVE_STATUS_FILTER',\n// };\n\nconst setStatusFilter = (status: Status): SetStatusFilterAction => ({\n  type: 'filter/SET_STATUS_FILTER',\n  payload: status,\n});\nconst setQueryFilter = (query: string): SetQueryFilterAction => ({\n  type: 'filter/SET_QUERY_FILTER',\n  payload: query,\n});\nconst clearQueryFilter = (): ClearQueryFilterAction => ({\n  type: 'filter/CLEAR_QUERY_FILTER',\n});\n// const removeStatusFilter = (): RemoveStatusFilterAction => ({\n//   type: 'filter/REMOVE_STATUS_FILTER',\n// });\n\nexport const actions = { setStatusFilter, setQueryFilter, clearQueryFilter };\n\ntype Action = SetStatusFilterAction\n| SetQueryFilterAction\n| ClearQueryFilterAction;\n\ntype Filter = {\n  query: string;\n  status: Status;\n};\n\nconst initialFilter: Filter = {\n  query: '',\n  status: 'all',\n};\n\nconst filterReducer = (\n  filter: Filter = initialFilter,\n  action: Action,\n): Filter => {\n  switch (action.type) {\n    case 'filter/SET_STATUS_FILTER':\n      return {\n        ...filter,\n        status: action.payload,\n      };\n\n    case 'filter/SET_QUERY_FILTER':\n      return {\n        ...filter,\n        query: action.payload,\n      };\n\n    case 'filter/CLEAR_QUERY_FILTER':\n      return {\n        ...filter,\n        query: '',\n      };\n\n    default:\n      return filter;\n  }\n};\n\nexport default filterReducer;\n","import { Todo } from '../types/Todo';\n\ntype LoadTodosAction = {\n  type: 'todos/LOAD';\n  payload: Todo[];\n};\ntype ClearTodosAction = { type: 'todos/CLEAR' };\ntype Action = LoadTodosAction | ClearTodosAction;\n\nconst load = (todos: Todo[]): LoadTodosAction => ({\n  type: 'todos/LOAD',\n  payload: todos,\n});\nconst clear = (): ClearTodosAction => ({ type: 'todos/CLEAR' });\n\nexport const actions = { load, clear };\n\nconst todosReducer = (\n  todos: Todo[] = [],\n  action: Action,\n): Todo[] => {\n  switch (action.type) {\n    case 'todos/LOAD':\n      return [...todos, ...action.payload];\n\n    case 'todos/CLEAR':\n      return [];\n\n    default:\n      return todos;\n  }\n};\n\nexport default todosReducer;\n","import { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\n\nimport currentTodoReducer from '../features/currentTodo';\nimport filterReducer from '../features/filter';\nimport todosReducer from '../features/todos';\n\nconst rootReducer = combineReducers({\n  currentTodo: currentTodoReducer,\n  filter: filterReducer,\n  todos: todosReducer,\n});\n\n// The `store` is passed to the Provider in `/src/index.tsx`\nexport const store = createStore(\n  rootReducer,\n  composeWithDevTools(\n    applyMiddleware(thunk),\n  ),\n);\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport { AppDispatch, RootState } from './store';\n\nexport const useAppDispatch: () => AppDispatch = useDispatch;\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","/* eslint-disable max-len */\nimport React from 'react';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { Todo } from '../../types/Todo';\nimport { actions as currentTodoActions } from '../../features/currentTodo';\n\nfunction searchInTitle(title: string, search: string) {\n  return title.toLowerCase().includes(search.trim().toLowerCase());\n}\n\nexport const TodoList: React.FC = () => {\n  const dispatch = useAppDispatch();\n  const filter = useAppSelector(state => state.filter);\n  const todos = useAppSelector(state => state.todos);\n  const currentTodo = useAppSelector(state => state.currentTodo);\n\n  let selectedTodos: Todo[];\n  let visibleTodos: Todo[];\n\n  switch (filter.status) {\n    case 'active':\n      selectedTodos = todos.filter(todo => !todo.completed);\n      break;\n\n    case 'completed':\n      selectedTodos = todos.filter(todo => todo.completed);\n      break;\n\n    default:\n      selectedTodos = todos;\n      break;\n  }\n\n  if (filter.query) {\n    visibleTodos = selectedTodos.filter(todo => searchInTitle(todo.title, filter.query));\n  } else {\n    visibleTodos = selectedTodos;\n  }\n\n  return (\n    <>\n      {!visibleTodos.length && (\n        <p className=\"notification is-warning\">\n          There are no todos matching current filter criteria\n        </p>\n      )}\n\n      {!!visibleTodos.length && (\n        <table className=\"table is-narrow is-fullwidth\">\n          <thead>\n            <tr>\n              <th>#</th>\n\n              <th>\n                <span className=\"icon\">\n                  <i className=\"fas fa-check\" />\n                </span>\n              </th>\n\n              <th>Title</th>\n              <th> </th>\n            </tr>\n          </thead>\n\n          <tbody>\n            {visibleTodos.map(todo => (\n              <tr\n                data-cy=\"todo\"\n                key={todo.id}\n                className={currentTodo && currentTodo.id === todo.id\n                  ? 'has-background-info-light'\n                  : ''}\n              >\n                <td className=\"is-vcentered\">{todo.id}</td>\n                <td className=\"is-vcentered\">\n                  {todo.completed && (\n                    <span className=\"icon\" data-cy=\"iconCompleted\">\n                      <i className=\"fas fa-check\" />\n                    </span>\n                  )}\n                </td>\n\n                <td className=\"is-vcentered is-expanded\">\n                  <p className={todo.completed\n                    ? 'has-text-success'\n                    : 'has-text-danger'}\n                  >\n                    {todo.title}\n                  </p>\n                </td>\n\n                <td className=\"has-text-right is-vcentered\">\n                  <button\n                    data-cy=\"selectButton\"\n                    className=\"button\"\n                    type=\"button\"\n                    onClick={() => dispatch(currentTodoActions.setTodo(todo))}\n                  >\n                    <span className=\"icon\">\n                      <i className={currentTodo && currentTodo.id === todo.id\n                        ? 'far fa-eye-slash'\n                        : 'far fa-eye'}\n                      />\n                    </span>\n                  </button>\n                </td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      )}\n    </>\n  );\n};\n","import React from 'react';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { actions as filterAactions } from '../../features/filter';\nimport { Status } from '../../types/Status';\n\nexport const TodoFilter: React.FC = () => {\n  const dispatch = useAppDispatch();\n  const filter = useAppSelector(state => state.filter);\n\n  const onStatusSelect = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    dispatch(filterAactions.setStatusFilter(event.target.value as Status));\n  };\n\n  const onQuery = (event: React.ChangeEvent<HTMLInputElement>) => {\n    dispatch(filterAactions.setQueryFilter(event.target.value));\n  };\n\n  const onDeleteQuery = () => dispatch(filterAactions.clearQueryFilter());\n\n  return (\n    <form\n      className=\"field has-addons\"\n      onSubmit={event => event.preventDefault()}\n    >\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            data-cy=\"statusSelect\"\n            value={filter.status}\n            onChange={onStatusSelect}\n          >\n            <option value=\"all\">All</option>\n            <option value=\"active\">Active</option>\n            <option value=\"completed\">Completed</option>\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n          value={filter.query}\n          onChange={onQuery}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        {filter.query && (\n          <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              data-cy=\"clearSearchButton\"\n              type=\"button\"\n              className=\"delete\"\n              onClick={onDeleteQuery}\n            />\n          </span>\n        )}\n\n      </p>\n    </form>\n  );\n};\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","import React, { useEffect, useState } from 'react';\nimport { Loader } from '../Loader';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { User } from '../../types/User';\nimport { getUser } from '../../api';\nimport { actions as currentTodoActions } from '../../features/currentTodo';\n\nexport const TodoModal: React.FC = () => {\n  const dispatch = useAppDispatch();\n  const currentTodo = useAppSelector(state => state.currentTodo);\n\n  const [user, setUser] = useState<User | null>(null);\n\n  useEffect(() => {\n    if (currentTodo) {\n      getUser(currentTodo.userId)\n        .then(loadedUser => setUser(loadedUser));\n    }\n  }, []);\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {!user && (\n        <Loader />\n      )}\n\n      {user && currentTodo && (\n        <div className=\"modal-card\">\n          <header className=\"modal-card-head\">\n            <div\n              className=\"modal-card-title has-text-weight-medium\"\n              data-cy=\"modal-header\"\n            >\n              {`Todo #${currentTodo.id}`}\n            </div>\n\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              type=\"button\"\n              className=\"delete\"\n              data-cy=\"modal-close\"\n              onClick={() => dispatch(currentTodoActions.removeTodo())}\n            />\n          </header>\n\n          <div className=\"modal-card-body\">\n            <p className=\"block\" data-cy=\"modal-title\">{currentTodo.title}</p>\n\n            <p className=\"block\" data-cy=\"modal-user\">\n              {currentTodo.completed\n                ? <strong className=\"has-text-success\">Done</strong>\n                : <strong className=\"has-text-danger\">Planned</strong>}\n\n              {' by '}\n\n              <a href={`mailto:${user.email}`}>\n                {user.name}\n              </a>\n            </p>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","/* eslint-disable max-len */\nimport React, { useEffect } from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\nimport { useAppDispatch, useAppSelector } from './app/hooks';\nimport { getTodos } from './api';\nimport { actions as todosActions } from './features/todos';\n\nexport const App: React.FC = () => {\n  const dispatch = useAppDispatch();\n  const todos = useAppSelector(state => state.todos);\n  const currentTodo = useAppSelector(state => state.currentTodo);\n\n  useEffect(() => {\n    getTodos()\n      .then(loadedTodos => dispatch(todosActions.load(loadedTodos)));\n  }, []);\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter />\n            </div>\n\n            <div className=\"block\">\n              {todos.length > 0\n                ? <TodoList />\n                : <Loader />}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {currentTodo && (<TodoModal />)}\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { HashRouter as Router } from 'react-router-dom';\n\nimport { store } from './app/store';\nimport { App } from './App';\n\n// Just a convenient component with all the wrappers for the `App`\n// The Router component (if you use it) should be placed inside the Provider\nconst Root = () => (\n  <Provider store={store}>\n    <Router>\n      <App />\n    </Router>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}